#!/usr/bin/python

import json
import sys
from datetime import datetime
from socket import socket, AF_INET, SOCK_DGRAM
from struct import Struct

# for logging to stdout
def log_normal(string):
    # redirect print output to stdout
    # this should be sys.stdout but dunno why its not working. fk it for now
    print >> sys.stderr, (datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

# for logging to stderr
def log_error(string):
    # redirect print output to stderr
    print >> sys.stderr, (datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

packet_data_length = 1500 - 100

# struct of int, char[], boolean, int
packet_struct = Struct("I {}s ? I".format(packet_data_length))
# mapping of packet sequences
sequence_packet_map = {}
# starting sequence num
sequence_num = 0
# our window size
window_size = 100
# current packet data
packet_data = None
# acks already sent out
acks_sent = []

# get the port the receiver opened up
ip_port = sys.argv[1]
udp_ip = ip_port[0:ip_port.find(":")]
udp_port = int(ip_port[ip_port.find(":")+1:])
dest = (udp_ip, udp_port)

# connect to socket and setup attributes
def setup_socket():
    my_socket = socket(AF_INET, SOCK_DGRAM)
    my_socket.settimeout(1.2)
    return my_socket

# Set up the socket
sock = setup_socket()

# Retrieve data from STDIN
def read_stdin():
    final_data = ""
    while True:
        intake = sys.stdin.read(1400)
        if len(intake) > 1:
            final_data += intake
        else:
            return final_data

# sends the packet
def send_packet():
    for w in range(window_size):
        data = packet_data[:1400]

        if len(data) > 0:
            global sequence_num
            global packet_data
            packet_data = packet_data[1400:]
            packet = packet_struct.pack(sequence_num, data, False, window_size)
            assert (len(packet) <= 1472), "ERROR: Datagram is longer than 1472 bytes!!!"

            sequence_num += len(data)
            if sock.sendto(packet, dest) < len(packet):
                log_error("[error] unable to fully send packet")
            else:
                global sequence_packet_map
                tupl = (packet, len(data))
                sequence_packet_map[sequence_num] = tupl
                log_normal("[send data] " + str(sequence_num) + " (" + str(len(data)) + ")")
        else:
            if w == 0:
                return False
    return True

# resends the packet based on sequence num
def resend_packet(sequence):
    global sequence_packet_map
    (data, size) = sequence_packet_map[sequence]
    if sock.sendto(data, dest) < len(data):
        log_error("[error] unable to fully send packet")
    else:
        log_normal("[send data] {} ({})".format(str(sequence), str(size)))

def shift_window():
    # log_normal("[info] window shifted by 1")
    window_size += 1
    # Try to send next packet; break if no more data
    success_or_nah = send_packet()
    if not success_or_nah:
        break

# iterate through the window size to for prerequistes steps
def iterate_window(sequence_num):
    for w in range(window_size):
        # check if we need to add this sequence num to our target acks
        flag = (sequence_num not in target_acks) and (sequence_num not in acks_sent)
        if flag:
            target_acks.append(sequence_num)
        global sequence_packet_map
        packet = sequence_packet_map.get(sequence_num, None)
        previous_sequence = sequence_num - packet[1]
        previous_packet = sequence_packet_map.get(previous_sequence, None)
        if not previous_packet:
            break
        sequence_num = previous_sequence
    return sequence_num

# send 'last termination packets' before ending gracefully
def final_attempt():
    for w in range(8):
        last_packet = packet_struct.pack(sequence_num, "", True, window_size)
        sock.sendto(last_packet, dest)

# initialize the permanent loop that reads from STDIN
packet_data = read_stdin()

# first, send the first packet
send_packet()

# main loop where the 'sending logic' happens
while True:
    target_acks = []
    sequence_temp = iterate_window(sequence_num)
    while True:
        if len(target_acks) == 0:
            break
        result = None
        try:
            # receive data from the receiver
            result = sock.recvfrom(1500)
        except:
            # resend packets that weren't received by the receiver
            for sequence_temp in target_acks:
                resend_packet(sequence_temp)
            continue
        if result:
            (data, addr) = result
            try:
                decoded = json.loads(data)
                my_ack = decoded['ack']
                # if ack has been received and acknowledged, we can conclude and clean this ack
                if my_ack in target_acks:
                    target_acks.remove(my_ack)
                    acks_sent.append(my_ack)
                    log_normal("[recv ack] " + str(my_ack))
            except (ValueError, KeyError, TypeError):
                log_error("[recv corrupt packet]")
        else:
            log_error("[error] timeout")
            sys.exit(-1)

    shift_window()

# yolo send packets, some will make it right...?
final_attempt()

log_normal("[completed]")
sys.exit(0)
